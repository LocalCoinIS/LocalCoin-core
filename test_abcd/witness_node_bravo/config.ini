# Endpoint for P2P node to listen on
p2p-endpoint = 0.0.0.0:11012

# P2P nodes to connect to on startup (may specify multiple times)
# seed-node =

# JSON array of P2P nodes to connect to on startup
; seed-node = 35.157.225.35:11010
seed-node = 3.122.41.195:11010
seed-node = 194.63.141.147:11010
seed-node = 0.0.0.0:11011
seed-node = 0.0.0.0:11013
seed-node = 0.0.0.0:11014
seed-node = 0.0.0.0:11015
seed-node = 0.0.0.0:11016
# seed-node = localcoin.airdroptelegramknights.io:11010
# seed-node = helsinki.localcoin.is:11010
# seed-node = ua-dnepro.localcoin.is:11010
# seed-node = moscow.localcoin.is:11010

# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.
# checkpoint =

# Endpoint for websocket RPC to listen on
rpc-endpoint = 0.0.0.0:8092

# Endpoint for TLS websocket RPC to listen on
# rpc-tls-endpoint =

# The TLS certificate file for this server
# server-pem =

# Password for this certificate
# server-pem-password =

# File to read Genesis State from
genesis-json = genesis.json

# Block signing key to use for init witnesses, overrides genesis file
# dbg-init-key =

# JSON file specifying API permissions
# api-access =

# Space-separated list of plugins to activate
#plugins = activenode  account_history market_history grouped_orders

# Enable block production, even if the chain is stale.
enable-stale-production = true

# Percent of witnesses (0-99) that must be participating in order to produce blocks
required-participation = false

#activenode-account = ratamahatta
#activenode-private-key = ["LLC5As5Lds81xuPevHswM1qDjYYyLBJgDcWXHLa16mZFtznHnYTL5", "5J1RfESiSGKpLYfSZG7oaVHGS4wtPAH3U2J9L6jqQJH5dVZTjA9"]
# activenode-account = test-account
# activenode-private-key = ["LLC8GnBkWPjpa4oMofmBUWS5ck9WkKSUjh9FAa9Z7DzFpZVb4XRYw", "5JxuifpxnTuMDCFeb9rwHSe6rUQD3JmVfB6QtJ6GyHa7KSsNDTQ"]
activenode-account = anode-alpha
activenode-private-key = ["LLC8Me6aJxgdx2s75iiYStgNmrKm8YqTACZipxVP23uoYfVpieXtB", "5JjQxwmo9WnuuSfcFKJiQCo9EBjzcJNyrCK3Kgn8N8T8iSQJe73"]

#activenode-account = anode-bravo
#activenode-private-key = ["LLC74Fzbq2fenDRAWw6MjS4qVFLFbWm66Q2eSidygAd5SfcifdqJL", "5KPmbeAhxuHdzaDtEn4dRfhqykxHdkZax6UXFNS1ycTmaPBJj8X"]

# ID of witness controlled by this node (e.g. "1.6.5", quotes are required, may specify multiple times)
#witness-id = "1.6.1"
#witness-id = "1.6.2"
#witness-id = "1.6.3"
#witness-id = "1.6.4"
#witness-id = "1.6.5"
#witness-id = "1.6.6"
#witness-id = "1.6.7"
#witness-id = "1.6.8"
#witness-id = "1.6.9"

debug-private-key = ["LLC5As5Lds81xuPevHswM1qDjYYyLBJgDcWXHLa16mZFtznHnYTL5", "5J1RfESiSGKpLYfSZG7oaVHGS4wtPAH3U2J9L6jqQJH5dVZTjA9"]
debug-private-key = ["LLC7DotXzjTBA4XDB4s7LFVdX8ZLMm8XxpTLi8CT1fRDCgKyRt4ER", "5KE6eZe24XDGrAPkfZro97DzUXQHEiSYtEPZaGzPDgJw5uibEik"]
debug-private-key = ["LLC595e6H6GsdqUn59hduKesEbTQxwrKqmGrLBNujrAbnngU1V6f5", "5K1s4ru4TEoAePvhYFYGeE51LpagkFPXdVroMZqwM5Ae6695uQR"]
debug-private-key = ["LLC86jRVcZaDpiwenz6vBQsuouQg2LGNTda2uXTX7wzk3YSqcbKDW", "5JLjdsHfRzuKYciUMbLMTrSFtPPWKUU8LRMQ1bza4BHdMAbWp6h"]
debug-private-key = ["LLC7zAhy5Q2vGAUmyBdrWPD47PWdPYAiGphagH4sUoAgeS38giYQd", "5KC62eHhS6FVnuZJm6pF2TTFBbfP8d6qpgCHX9Ks1yyybi5sCKn"]
debug-private-key = ["LLC7aUQU9HTU2VgxCSWAgjjaKQUnWcutrfCB86Qcbizfv9cCNKjoY", "5HyvyovXMEzFdbM5BXeXLQm9zdDum8q5MfA4NPUAuVatnUkxFay"]
debug-private-key = ["LLC5MGJfzVmu7dtiqPTAmn1a2tcBEKsi4aVz4nhsv36TghjtbqU2i", "5JmpFxQxdE7d4ApLxEaSwCSiBKoD1j7BqLpsAf6G7aPz5KTmKTf"]
debug-private-key = ["LLC5Cq5CVy8KSp82ykEkyUVehqCKcD3VdHNo6EpcWRs7zjr27pGQF", "5KVXhrvMKTcG1gu8T62RUXqi1umD3u83YvbYhmSmjYD6hv1f11E"]
debug-private-key = ["LLC5XiP9XkRzYTkDfBL1yVGTkTrVqyuyh18TNL3vGwPcLMvDJYFyQ", "5KJzH3RaUA9W9QBp5rjePMBPco83PoFdX3RaFtGUDnT5Cj7uZmj"]

private-key = ["LLC5As5Lds81xuPevHswM1qDjYYyLBJgDcWXHLa16mZFtznHnYTL5", "5J1RfESiSGKpLYfSZG7oaVHGS4wtPAH3U2J9L6jqQJH5dVZTjA9"]
private-key = ["LLC7DotXzjTBA4XDB4s7LFVdX8ZLMm8XxpTLi8CT1fRDCgKyRt4ER", "5KE6eZe24XDGrAPkfZro97DzUXQHEiSYtEPZaGzPDgJw5uibEik"]
private-key = ["LLC595e6H6GsdqUn59hduKesEbTQxwrKqmGrLBNujrAbnngU1V6f5", "5K1s4ru4TEoAePvhYFYGeE51LpagkFPXdVroMZqwM5Ae6695uQR"]
private-key = ["LLC86jRVcZaDpiwenz6vBQsuouQg2LGNTda2uXTX7wzk3YSqcbKDW", "5JLjdsHfRzuKYciUMbLMTrSFtPPWKUU8LRMQ1bza4BHdMAbWp6h"]
private-key = ["LLC7zAhy5Q2vGAUmyBdrWPD47PWdPYAiGphagH4sUoAgeS38giYQd", "5KC62eHhS6FVnuZJm6pF2TTFBbfP8d6qpgCHX9Ks1yyybi5sCKn"]
private-key = ["LLC7aUQU9HTU2VgxCSWAgjjaKQUnWcutrfCB86Qcbizfv9cCNKjoY", "5HyvyovXMEzFdbM5BXeXLQm9zdDum8q5MfA4NPUAuVatnUkxFay"]
private-key = ["LLC5MGJfzVmu7dtiqPTAmn1a2tcBEKsi4aVz4nhsv36TghjtbqU2i", "5JmpFxQxdE7d4ApLxEaSwCSiBKoD1j7BqLpsAf6G7aPz5KTmKTf"]
private-key = ["LLC5Cq5CVy8KSp82ykEkyUVehqCKcD3VdHNo6EpcWRs7zjr27pGQF", "5KVXhrvMKTcG1gu8T62RUXqi1umD3u83YvbYhmSmjYD6hv1f11E"]
private-key = ["LLC5XiP9XkRzYTkDfBL1yVGTkTrVqyuyh18TNL3vGwPcLMvDJYFyQ", "5KJzH3RaUA9W9QBp5rjePMBPco83PoFdX3RaFtGUDnT5Cj7uZmj"]

# Account ID to track history for (may specify multiple times)
# track-account =

# Keep only those operations in memory that are related to account history tracking
partial-operations = 1

# Maximum number of operations per account will be kept in memory
max-ops-per-account = 1000

# Elastic Search database node url
# elasticsearch-node-url =

# Number of bulk documents to index on replay(5000)
# elasticsearch-bulk-replay =

# Number of bulk documents to index on a syncronied chain(10)
# elasticsearch-bulk-sync =

# Log bulk events to database
# elasticsearch-logs =

# Use visitor to index additional data(slows down the replay)
# elasticsearch-visitor =

# Track market history by grouping orders into buckets of equal size measured in seconds specified as a JSON array of numbers
bucket-size = [60,300,900,1800,3600,14400,86400]

# How far back in time to track history for each bucket size, measured in the number of buckets (default: 1000)
history-per-size = 1000

# Will only store this amount of matched orders for each market in order history for querying, or those meet the other option, which has more data (default: 1000)
max-order-his-records-per-market = 1000

# Will only store matched orders in last X seconds for each market in order history for querying, or those meet the other option, which has more data (default: 259200 (3 days))
max-order-his-seconds-per-market = 259200

# RPC endpoint of a trusted validating node (required)
# trusted-node =

# Block number after which to do a snapshot
# snapshot-at-block =

# Block time (ISO format) after which to do a snapshot
# snapshot-at-time =

# Pathname of JSON file where to store the snapshot
# snapshot-to =

# Elasticsearch node url
# es-objects-elasticsearch-url =

# Log bulk events to database
# es-objects-logs =

# Number of bulk documents to index on replay(5000)
# es-objects-bulk-replay =

# Number of bulk documents to index on a syncronied chain(10)
# es-objects-bulk-sync =

# Store proposal objects
# es-objects-proposals =

# Store account objects
# es-objects-accounts =

# Store asset objects
# es-objects-assets =

# Store balances objects
# es-objects-balances =

# Store limit order objects
# es-objects-limit-orders =

# Store feed data
# es-objects-asset-bitasset =

# Group orders by percentage increase on price. Specify a JSON array of numbers here, each number is a group, number 1 means 0.01%.
tracked-groups = [10,100]

# declare an appender named "stderr" that writes messages to the console
[log.console_appender.stderr]
stream=std_error

# declare an appender named "p2p" that writes messages to p2p.log
[log.file_appender.p2p]
# filename can be absolute or relative to this config file
filename=logs/p2p/p2p.log
# Rotate log every ? minutes, if leave out default to 60
rotation_interval=60
# how long will logs be kept (in days), if leave out default to 7
rotation_limit=1

# route any messages logged to the default logger to the "stderr" logger we
# declared above, if they are info level are higher
[logger.default]
level=info
appenders=stderr

# route messages sent to the "p2p" logger to the p2p appender declared above
[logger.p2p]
level=info
appenders=p2p
